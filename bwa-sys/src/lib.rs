/* automatically generated by rust-bindgen 0.64.0 */
#![allow(non_snake_case, non_camel_case_types)]

pub const BWA_IDX_BWT: u32 = 1;
pub const BWA_IDX_BNS: u32 = 2;
pub const BWA_IDX_PAC: u32 = 4;
pub const BWA_IDX_ALL: u32 = 7;
pub const MEM_F_PE: u32 = 2;
pub const MEM_F_NOPAIRING: u32 = 4;
pub const MEM_F_ALL: u32 = 8;
pub const MEM_F_NO_MULTI: u32 = 16;
pub const MEM_F_NO_RESCUE: u32 = 32;
pub const MEM_F_REF_HDR: u32 = 256;
pub const MEM_F_SOFTCLIP: u32 = 512;
pub const MEM_F_SMARTPE: u32 = 1024;
pub const MEM_F_PRIMARY5: u32 = 2048;
pub const MEM_F_KEEP_SUPP_MAPQ: u32 = 4096;
pub const MEM_F_XB: u32 = 8192;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type bwtint_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwt_t {
    pub primary: bwtint_t,
    pub L2: [bwtint_t; 5usize],
    pub seq_len: bwtint_t,
    pub bwt_size: bwtint_t,
    pub bwt: *mut u32,
    pub cnt_table: [u32; 256usize],
    pub sa_intv: ::std::os::raw::c_int,
    pub n_sa: bwtint_t,
    pub sa: *mut bwtint_t,
}
#[test]
fn bindgen_test_layout_bwt_t() {
    const UNINIT: ::std::mem::MaybeUninit<bwt_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bwt_t>(),
        1120usize,
        concat!("Size of: ", stringify!(bwt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bwt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(bwt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primary) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bwt_t),
            "::",
            stringify!(primary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).L2) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(bwt_t), "::", stringify!(L2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq_len) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(bwt_t),
            "::",
            stringify!(seq_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bwt_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(bwt_t),
            "::",
            stringify!(bwt_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bwt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(bwt_t),
            "::",
            stringify!(bwt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnt_table) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(bwt_t),
            "::",
            stringify!(cnt_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_intv) as usize - ptr as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(bwt_t),
            "::",
            stringify!(sa_intv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_sa) as usize - ptr as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(bwt_t),
            "::",
            stringify!(n_sa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize },
        1112usize,
        concat!("Offset of field: ", stringify!(bwt_t), "::", stringify!(sa))
    );
}
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bntann1_t {
    pub offset: i64,
    pub len: i32,
    pub n_ambs: i32,
    pub gi: u32,
    pub is_alt: i32,
    pub name: *mut ::std::os::raw::c_char,
    pub anno: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_bntann1_t() {
    const UNINIT: ::std::mem::MaybeUninit<bntann1_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bntann1_t>(),
        40usize,
        concat!("Size of: ", stringify!(bntann1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bntann1_t>(),
        8usize,
        concat!("Alignment of ", stringify!(bntann1_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bntann1_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bntann1_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_ambs) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bntann1_t),
            "::",
            stringify!(n_ambs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gi) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bntann1_t),
            "::",
            stringify!(gi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_alt) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(bntann1_t),
            "::",
            stringify!(is_alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bntann1_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anno) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bntann1_t),
            "::",
            stringify!(anno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bntamb1_t {
    pub offset: i64,
    pub len: i32,
    pub amb: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_bntamb1_t() {
    const UNINIT: ::std::mem::MaybeUninit<bntamb1_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bntamb1_t>(),
        16usize,
        concat!("Size of: ", stringify!(bntamb1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bntamb1_t>(),
        8usize,
        concat!("Alignment of ", stringify!(bntamb1_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bntamb1_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bntamb1_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amb) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bntamb1_t),
            "::",
            stringify!(amb)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bntseq_t {
    pub l_pac: i64,
    pub n_seqs: i32,
    pub seed: u32,
    pub anns: *mut bntann1_t,
    pub n_holes: i32,
    pub ambs: *mut bntamb1_t,
    pub fp_pac: *mut FILE,
}
#[test]
fn bindgen_test_layout_bntseq_t() {
    const UNINIT: ::std::mem::MaybeUninit<bntseq_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bntseq_t>(),
        48usize,
        concat!("Size of: ", stringify!(bntseq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bntseq_t>(),
        8usize,
        concat!("Alignment of ", stringify!(bntseq_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_pac) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bntseq_t),
            "::",
            stringify!(l_pac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_seqs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bntseq_t),
            "::",
            stringify!(n_seqs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seed) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bntseq_t),
            "::",
            stringify!(seed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anns) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bntseq_t),
            "::",
            stringify!(anns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_holes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bntseq_t),
            "::",
            stringify!(n_holes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ambs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bntseq_t),
            "::",
            stringify!(ambs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_pac) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bntseq_t),
            "::",
            stringify!(fp_pac)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwaidx_t {
    pub bwt: *mut bwt_t,
    pub bns: *mut bntseq_t,
    pub pac: *mut u8,
    pub is_shm: ::std::os::raw::c_int,
    pub l_mem: i64,
    pub mem: *mut u8,
}
#[test]
fn bindgen_test_layout_bwaidx_t() {
    const UNINIT: ::std::mem::MaybeUninit<bwaidx_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bwaidx_t>(),
        48usize,
        concat!("Size of: ", stringify!(bwaidx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bwaidx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(bwaidx_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bwt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bwaidx_t),
            "::",
            stringify!(bwt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bwaidx_t),
            "::",
            stringify!(bns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pac) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bwaidx_t),
            "::",
            stringify!(pac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_shm) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bwaidx_t),
            "::",
            stringify!(is_shm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_mem) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bwaidx_t),
            "::",
            stringify!(l_mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bwaidx_t),
            "::",
            stringify!(mem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bseq1_t {
    pub l_seq: ::std::os::raw::c_int,
    pub id: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub seq: *mut ::std::os::raw::c_char,
    pub qual: *mut ::std::os::raw::c_char,
    pub sam: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_bseq1_t() {
    const UNINIT: ::std::mem::MaybeUninit<bseq1_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bseq1_t>(),
        48usize,
        concat!("Size of: ", stringify!(bseq1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bseq1_t>(),
        8usize,
        concat!("Alignment of ", stringify!(bseq1_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bseq1_t),
            "::",
            stringify!(l_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bseq1_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bseq1_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bseq1_t),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bseq1_t),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qual) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bseq1_t),
            "::",
            stringify!(qual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sam) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bseq1_t),
            "::",
            stringify!(sam)
        )
    );
}
extern "C" {
    pub fn bwa_fill_scmat(a: ::std::os::raw::c_int, b: ::std::os::raw::c_int, mat: *mut i8);
}
extern "C" {
    pub fn bwa_idx_build(
        fa: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
        algo_type: ::std::os::raw::c_int,
        block_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bwa_idx_load(
        hint: *const ::std::os::raw::c_char,
        which: ::std::os::raw::c_int,
    ) -> *mut bwaidx_t;
}
extern "C" {
    pub fn bwa_idx_destroy(idx: *mut bwaidx_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_opt_t {
    pub a: ::std::os::raw::c_int,
    pub b: ::std::os::raw::c_int,
    pub o_del: ::std::os::raw::c_int,
    pub e_del: ::std::os::raw::c_int,
    pub o_ins: ::std::os::raw::c_int,
    pub e_ins: ::std::os::raw::c_int,
    pub pen_unpaired: ::std::os::raw::c_int,
    pub pen_clip5: ::std::os::raw::c_int,
    pub pen_clip3: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub zdrop: ::std::os::raw::c_int,
    pub max_mem_intv: u64,
    pub T: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_int,
    pub min_seed_len: ::std::os::raw::c_int,
    pub min_chain_weight: ::std::os::raw::c_int,
    pub max_chain_extend: ::std::os::raw::c_int,
    pub split_factor: f32,
    pub split_width: ::std::os::raw::c_int,
    pub max_occ: ::std::os::raw::c_int,
    pub max_chain_gap: ::std::os::raw::c_int,
    pub n_threads: ::std::os::raw::c_int,
    pub chunk_size: ::std::os::raw::c_int,
    pub mask_level: f32,
    pub drop_ratio: f32,
    pub XA_drop_ratio: f32,
    pub mask_level_redun: f32,
    pub mapQ_coef_len: f32,
    pub mapQ_coef_fac: ::std::os::raw::c_int,
    pub max_ins: ::std::os::raw::c_int,
    pub max_matesw: ::std::os::raw::c_int,
    pub max_XA_hits: ::std::os::raw::c_int,
    pub max_XA_hits_alt: ::std::os::raw::c_int,
    pub mat: [i8; 25usize],
}
#[test]
fn bindgen_test_layout_mem_opt_t() {
    const UNINIT: ::std::mem::MaybeUninit<mem_opt_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mem_opt_t>(),
        168usize,
        concat!("Size of: ", stringify!(mem_opt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mem_opt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mem_opt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).o_del) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(o_del)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_del) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(e_del)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).o_ins) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(o_ins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_ins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(e_ins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pen_unpaired) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(pen_unpaired)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pen_clip5) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(pen_clip5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pen_clip3) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(pen_clip3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zdrop) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(zdrop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mem_intv) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(max_mem_intv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).T) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(T)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_seed_len) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(min_seed_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_chain_weight) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(min_chain_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_chain_extend) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(max_chain_extend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).split_factor) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(split_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).split_width) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(split_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_occ) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(max_occ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_chain_gap) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(max_chain_gap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_threads) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(n_threads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_size) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(chunk_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask_level) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(mask_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drop_ratio) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(drop_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).XA_drop_ratio) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(XA_drop_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask_level_redun) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(mask_level_redun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapQ_coef_len) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(mapQ_coef_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapQ_coef_fac) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(mapQ_coef_fac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_ins) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(max_ins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_matesw) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(max_matesw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_XA_hits) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(max_XA_hits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_XA_hits_alt) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(max_XA_hits_alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mat) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(mat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_pestat_t {
    pub low: ::std::os::raw::c_int,
    pub high: ::std::os::raw::c_int,
    pub failed: ::std::os::raw::c_int,
    pub avg: f64,
    pub std: f64,
}
#[test]
fn bindgen_test_layout_mem_pestat_t() {
    const UNINIT: ::std::mem::MaybeUninit<mem_pestat_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mem_pestat_t>(),
        32usize,
        concat!("Size of: ", stringify!(mem_pestat_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mem_pestat_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mem_pestat_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_pestat_t),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_pestat_t),
            "::",
            stringify!(high)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).failed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_pestat_t),
            "::",
            stringify!(failed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_pestat_t),
            "::",
            stringify!(avg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).std) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_pestat_t),
            "::",
            stringify!(std)
        )
    );
}
extern "C" {
    pub fn mem_opt_init() -> *mut mem_opt_t;
}
extern "C" {
    pub fn mem_process_seqs(
        opt: *const mem_opt_t,
        bwt: *const bwt_t,
        bns: *const bntseq_t,
        pac: *const u8,
        n_processed: i64,
        n: ::std::os::raw::c_int,
        seqs: *mut bseq1_t,
        pes0: *const mem_pestat_t,
    );
}
extern "C" {
    pub fn mem_process_seq_pe(
        opt: *const mem_opt_t,
        bwt: *const bwt_t,
        bns: *const bntseq_t,
        pac: *const u8,
        seqs: *mut bseq1_t,
        pes: *const mem_pestat_t,
    );
}
